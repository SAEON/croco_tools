#!/bin/tcsh
####################################################
#               COMPILATION JOB                    #
####################################################
unalias rm
unalias mv
unalias cp
#
# set source, compilation and run directories
#
set SOURCE=../Roms_Agrif
set SCRDIR=../Compile
set RUNDIR=`pwd`
#
# determine operating system
#
set OS = `uname`
echo OPERATING SYSTEM IS: $OS
#
# Linux compiler options (only relevant to Linux OS)
#
if ($OS == Linux) then
#  set LINUX_FC=gfortran
  set LINUX_FC=ifort
#  set LINUX_FC=ifc
#  set LINUX_FC=g95
#  set LINUX_FC=g77
#
# set 32 or 64 Bits executable
#
  set ARCH = `uname -m`
  echo PROCESSOR IS: $ARCH
  if ($ARCH == x86_64) then
    set BITS=SIXTYFOUR
  else
    set BITS=THIRTYTWO
  endif
else
  set BITS=THIRTYTWO
#  set BITS=SIXTYFOUR
endif
#
# set NETCDF directories
#
set NETCDFLIB=-L/usr/local/lib
set NETCDFINC=-I/usr/local/include
#
if ($OS == Linux) then
  if ($LINUX_FC == g77) then
    if ($BITS == THIRTYTWO) then
      set NETCDFLIB=-L../netcdf_g77/
      set NETCDFINC=-I../netcdf_g77/
    endif
  else if ($LINUX_FC == ifort || $LINUX_FC == gfortran) then
    if ($BITS == THIRTYTWO) then
      set NETCDFLIB=-L../netcdf_ifc/
      set NETCDFINC=-I../netcdf_ifc/
    else
      set NETCDFLIB=-L../netcdf_x86_64
      set NETCDFINC=-I../netcdf_x86_64
    endif
  endif
endif
#
# set MPI directories if needed
#
set MPILIB="-L/usr/local/lib -lmpich"
set MPIINC=-I/usr/local/include
#
# END OF USER'S MODIFICATIONS
####################################################
#
# Use GNU Make command
#
set MAKE = make
#
# clean scratch area
#
rm -rf $SCRDIR
mkdir $SCRDIR
#
# copy SOURCE code
#
/bin/cp -f ${SOURCE}/*.F $SCRDIR
/bin/cp -f ${SOURCE}/*.h $SCRDIR
/bin/cp -f ${SOURCE}/Make* $SCRDIR
/bin/cp -f ${SOURCE}/testkeys.F $SCRDIR
/bin/cp -f ${SOURCE}/jobcomp $SCRDIR
/bin/cp -f ${SOURCE}/amr.in $SCRDIR
/bin/cp -Rf ${SOURCE}/AGRIFZOOM $SCRDIR
/bin/cp -f ${SOURCE}/PISCES/* $SCRDIR
/bin/cp -f ${SOURCE}/PISCES/kRGB61.txt $RUNDIR
if (  -e "namelist.trc.sms" ) then
  echo "  file namelist.trc.sms exists in Run directory"
else
  /bin/cp -f ${SOURCE}/PISCES/namelist.trc.sms* $RUNDIR
  echo "  file namelist.trc.sms copied from source directory"
endif
#
# overwrite with local files
#
/bin/cp -f *.F $SCRDIR
/bin/cp -f *.h $SCRDIR
/bin/cp -f Make* $SCRDIR
/bin/cp -f jobcomp $SCRDIR
#/bin/cp -f amr.in $SCRDIR
#
# Change directory
#
cd $SCRDIR

#
# generates LDFLAGS1 according to users notifications
#
setenv LDFLAGS1 "$NETCDFLIB"
setenv CPPFLAGS1 "$NETCDFINC -IROMSFILES/AGRIF_INC"
#
# Set compilation options
#
if ($OS == Linux) then          # LINUX
  set OS = Linux
 if ($LINUX_FC == ifort || $LINUX_FC == ifc) then
    setenv CPP1 "cpp -traditional -DLinux"
    setenv CFT1 ifort
    setenv FFLAGS1 "-O3 -w90 -w95 -cm -72 -fno-alias -i4 -r8 -fp-model precise"
    setenv LDFLAGS1 "-Vaxlib $LDFLAGS1"
  else if ($LINUX_FC == gfortran) then
    setenv CPP1 "cpp -traditional -DLinux"
    setenv CFT1 gfortran
    setenv FFLAGS1 "-O3 -fdefault-real-8"
    setenv LDFLAGS1 "$LDFLAGS1"
  endif

else if ($OS == AIX) then       # IBM
  set OS = AIX
  setenv CPP1 /lib/cpp
  setenv CFT1 "xlf95 -I$HOME/include/"
  if ($BITS == THIRTYTWO) then
    set MAKEAGRIF=Makefile.ibm
    setenv FFLAGS1 "-qfixed -O5 -qstrict -qalias=noaryovrlp -qhot -qrealsize=8 -qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
#    setenv FFLAGS1 "-g -qfixed -O2 -qstrict -qalias=noaryovrlp -qrealsize=8 -qintsize=4 -qarch=auto -qtune=auto -qcache=auto -bmaxdata:0x80000000"
  else
    set MAKEAGRIF=Makefile.ibm.64
    setenv FFLAGS1 "-q64 -qwarn64 -qfixed -qrealsize=8 -qintsize=8 -qhot -qalias=noaryovrlp -qthreaded -O3 -qarch=pwr4 -qtune=pwr4 -qunroll=yes"
  endif

else if ($OS == OSF1) then     # COMPAQ
  set OS = OSF1
  setenv CPP1 /lib/cpp
  setenv CFT1 f95
  setenv FFLAGS1 "-fast -i4 -r8"

else if ($OS == IRIX64) then   # SGI
  set OS = IRIX64
  setenv CPP1 "/usr/freeware/bin/cpp -traditional"
  setenv CFT1 f90
  setenv FFLAGS1 "-O2"

else if ($OS == SunOS) then 	   # SUN:  tested on SunFire 880 (SPARC III)
  set GREP = /usr/xpg4/bin/grep    #       and Sun Ultra-60 (SPARC II)
  set OS = SunOS
  setenv CPP1 /lib/cpp
  setenv CFT1 "f95"
  if ($BITS == THIRTYTWO) then
    set MAKEAGRIF=Makefile.sun
    setenv FFLAGS1 "-O5 -xtarget=native -xprefetch -xtypemap=real:64,double:128 -xlibmopt"
  else
    set MAKEAGRIF=Makefile.sun.64
    setenv FFLAGS1 "-O5 -xtarget=native64 -xprefetch -xtypemap=real:64,double:128 -xlibmopt "
  endif
else if ($OS == Darwin) then          # DARWIN IFORT
  set OS = Darwin
    setenv CPP1 "cpp -DLinux"
    setenv CFT1 ifort
    setenv FFLAGS1 "-O2 -r8 -i4 -g -w90 -w95 -cm -72"
else
  echo "Unknown Operating System"
  exit
endif

#
# determine if the compilation of AGRIF is necessary
#
unset COMPILEAGRIF
if { eval `$CPP1 testkeys.F | grep -i -q agrifisdefined` } then
  set COMPILEAGRIF = TRUE
  setenv FFLAGS1 "$FFLAGS1 -I AGRIFZOOM"
  setenv LDFLAGS1 "-LAGRIFZOOM -lagrif $LDFLAGS1"
# we use the AGRIF Makedefs.generic definition
  /bin/cp -f AGRIFZOOM/Makedefs.generic .
endif

#
# determine if the mpi compilation is necessary
#
unset COMPILEMPI
if { eval `$CPP1 testkeys.F | grep -i -q mpiisdefined` } then
  set COMPILEMPI = TRUE
  setenv LDFLAGS1 "$LDFLAGS1 $MPILIB"
  setenv CPPFLAGS1 "$CPPFLAGS1 $MPIINC"
  setenv FFLAGS1 "$FFLAGS1 $MPIINC"
  setenv CFT1 mpif90
endif


#
# rewrite the Makedefs according to previous flags
# with openmp flags if necessary
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# clean scratch
#
$MAKE clobber

#
# compile the precompiling program
#
$MAKE mpc

#
# prepare and compile the library
#
if ($?COMPILEAGRIF) then
#
# compile the AGRIF librairy
#
  if ($?COMPILEMPI) then
  $MAKE -C AGRIFZOOM COMDIRIN=./ COMDIROUT=./ F90="$CFT1" CPP="$CPP1 -DAGRIF_MPI $MPIINC" FFLAGS_EXTEND="$FFLAGS1"
  else
  $MAKE -C AGRIFZOOM COMDIRIN=./ COMDIROUT=./ F90="$CFT1" CPP="$CPP1" FFLAGS_EXTEND="$FFLAGS1"
  endif
  if ($OS == Darwin) then          # DARWIN
# run RANLIB on Darwin system
  ranlib AGRIFZOOM/libagrif.a
  endif
#
  cpp amr.in | grep -v -e ! -e '#' -e % -e '*' > amr.scrum
  mkdir ROMSFILES
  mv AGRIFZOOM/conv ROMSFILES/.
  mv amr.scrum ROMSFILES/.
  cd ROMSFILES
  mkdir AGRIF_MODELFILES
  mkdir AGRIF_INC
  cd ..
  
  set INCLUDELIST="param.h averages.h climat.h forces.h lmd_kpp.h mixing.h ocean2d.h ocean3d.h work.h private_scratch_AMR.h scalars.h ncscrum.h coupling.h grid.h tides.h sediment.h bbl.h zoom.h floats.h sources.h buffer.h diagnostics.h common.h common.passivetrc.pisces.h parameter.passivetrc.h trcctl.pisces.h trclsm.pisces.h common.passivetrc.h parameter.h parameter.passivetrc.pisces.h trcini.pisces.h"
		    
  foreach i ($INCLUDELIST)
    echo $i
    cat cppdefs.h $i | cpp -P | grep -v -e ! -e '#' -e % -e '*' > ROMSFILES/$i
  end

  mv -f ROMSFILES/private_scratch_AMR.h ROMSFILES/private_scratch.h

endif

#
# determine if the openmp compilation is necessary
#
unset COMPILEOMP
if { eval `$CPP1 testkeys.F | grep -i -q openmp` } then
  set COMPILEOMP = TRUE
  if ($OS == AIX) then
    setenv FFLAGS1 "$FFLAGS1 -qsmp=omp"
    setenv CFT1 xlf95_r
  else if ($OS == Linux) then
    if ($LINUX_FC == gfortran) then
      setenv FFLAGS1 "$FFLAGS1 -fopenmp"
    else if ($LINUX_FC == ifort || $LINUX_FC == ifc) then
      setenv FFLAGS1 "$FFLAGS1 -openmp"
    else
      setenv FFLAGS1 "$FFLAGS1 -openmp"
    endif
  else if ($OS == OSF1) then
    setenv FFLAGS1 "$FFLAGS1 -omp"
  else if ($OS == IRIX64) then
    setenv FFLAGS1 "$FFLAGS1 -mp"
  else if ($OS == SunOS) then 
    setenv FFLAGS1 "$FFLAGS1 -openmp"
  else if ($OS == Darwin) then 
    setenv FFLAGS1 "$FFLAGS1 -openmp"
  endif
endif
#
# rewrite the Makedefs according to previous flags
# with openmp flags if necessary
#
rm -f Makedefs
echo 's?$(FFLAGS1)?'$FFLAGS1'?g' > flags.tmp
echo 's?$(LDFLAGS1)?'$LDFLAGS1'?g' >> flags.tmp
echo 's?$(CPP1)?'$CPP1'?g' >> flags.tmp
echo 's?$(CFT1)?'$CFT1'?g' >> flags.tmp
echo 's?$(CPPFLAGS1)?'$CPPFLAGS1'?g' >> flags.tmp
sed -f flags.tmp Makedefs.generic > Makedefs
rm -f flags.tmp

#
# compile roms
#
$MAKE 
mv roms $RUNDIR
#
