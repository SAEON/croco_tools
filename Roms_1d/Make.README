Instructions how to use makefile to build ROMS model.
============================================================
There are three types of makefiles files associated with the
ROMS building procedure:

  i. Makefile: universal machine independent makefile.
     This file contains list of source code files which determine
     the particular model configuration to be build.
     User is free to add or delete files from this configuration
     list at his/her own discretion without any restrictions,
     depending on physical formulation of the problem. 

 ii. "Makedefs.machine_type" (for example "Makedefs.sgi",
     "Makedefs.sgi"). These files contain definitions of rules,
     compilers and compiler options. These files are generally
     machine dependent. These files may be edited by the user in
     order to insure optimal usage of the compiler flags for
     a particular machine type or compiler.  

iii. "Make.depend" automatically generated list of dependencies.
     usually this list contains the names and dependencies of ALL
     source codes in the directory regardless weather they are
     actually needed in the present configuration or not. 
     This file is practically machine independent. This file
     should not be edited by user under any circumstances.


HOW TO MAKE Makefile WORK:
==========================

  1. On a particular machine, for example a Sun, establish symbolic
     link:
                  ln -s Makedefs.sun Makedefs 

     (If the file for the paricular type of machine is not available
     create it, using one of the existing "Makedefs.machine" files
     as a template. Define appropriate compiler options.)

  2. Check, if file "Make.depend" exists in the present directory.
     if it does not exist, create an EMPTY file and call it
     "Make.depend".

  3. After steps 1 and 2 your Makefeile should be able to work.
     Type
                   make tools

     This will create two auxiliary utility executable files named
     "cross_matrix" and "mpc". The first one, "cross_matrix" is a
     tool to analyze dependencies and build "Make.depend", the
     second one in an auxiliary multifunctional precompiler designed
     to make .f files generated by CPP more human readable by
     cleaning them from blank lines and comments, as well as to
     perform certain code transformations and optimizations
     (optionally). Read headers of files "mpc.F" and "cross_matrix.F"
     for more details. Once tools are build, it is not necessary
     to rebuild them every time when compiling the model, unless
     files "cross_matrix.F" and "mpc.F" were modified.

  4. Type
                    make depend

     This will create file "Make.depend" consistent with the content
     of all *.F files in the current working directory. All source
     code *.F files will be included into dependency list, regardless
     weather they are actually used or not. User have to update
     "Make.depend" only if
          (A) a brand new source code file is introduced into the
              working directory and it participates in the SRSC list
              in the "Makefile" to build the model,
      or
          (B) in a source code file a new #include statement, which
              includes a file previously not included.

     It is not necessary to type make depend every time after
     changing SRSC list in the "Makefile", say switching from
     "prsgrd.F" to "prsgrd3.F" back and forth, as long as neither
     (A) nor (B) happens.

  5. After step 4 Makefile becomes fully operational.
     Type
                    make
     or
                    smake             (on and SGI machine)
     or
                    smake -J 8        (on and SGI machine)
 
     to build the model. (Here smake will make individual targets
     in parallel, is multiple processors are available. -J stands
     to specify the desired number of processors involved to override
     the default, for example 8. 

FINAL REMARK:
=============

 iv.  Once steps 1 and 2 are performed, one can simply type

                     make all

     instead of steps 3,4,5. However, doing it in parallel, that
     is "smake all" is not recommended, since the dependency file,
     "Make.depend", is being modified during this procedure.

  v. Command "make clean" is recommended when compiler options are
     changed. Otherwise it is unnecessary. "make depend" is
     sufficient most of the time after some of the model source
     codes and .h files were edited.


      
     
     
